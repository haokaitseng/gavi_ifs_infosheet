---
format: #typst #pdf
  info-sheet-typst: default   
  
params: 
  current_iso3: BEN
  current_country_en: Benin
  #current_country_fr: Bénin # Fr will be fed through rendering in 01_render_parameter.R
  lang: fr # en / fr
  current_year: 2024
  projected_year: 2029
  ghed_year: 2021
  jrf_year: 2019 
# title and edition queue after params  
title: "`r params$current_country_en`"

edition: "`r if (params$lang == 'en') {
                 paste0('Last updated: ', format(Sys.Date(), '%d %B %Y'))
           } else {
                 Sys.setlocale('LC_TIME', 'fr_FR.UTF-8')
                 paste0('Dernière mise à jour: ', format(Sys.Date(), '%d %B %Y'))
           }`"
---

```{r read-data}
#| echo: false
#| results: "hide"
#| warning: false

#### SETUP ####
#rm(list=ls()) #IMPORTANT: don't deploy it and kill your params
setwd("I:/") # please initiate the "Map I After Syncing" file in the IFS root folder

# packages
packages_CRAN <- c("webshot", "tinytable", "tidyverse", "readxl", "janitor", "ggplot2", "scales", 
                   "knitr")

for (i in packages_CRAN) {
  if (!i %in% rownames(installed.packages()) ) {
    install.packages(i, repos = "http://cran.us.r-project.org")}
  }

lapply(packages_CRAN, require, character.only = TRUE)

if(!require(gavir)) devtools::install_github("joshualorin/gavir") # not in CRAN


# global option
options(scipen=999)
options(tinytable_quarto_figure = TRUE)#!! IMPORTANT - avoiding across table effects
options(tinytable_print_output = "typst")

#### READ DATA ####

dat_mapping <- read_excel("40. Data/IFS_mapping-files/country-mapping.xlsx",
                          sheet = "country_mapping") |> clean_names()

dat_launch <-  read_excel("41. Analytics/vaccine-launches/output_for_infosheet/infosheet_section_vaccine_launch_2024-11-18.xlsx")

dat_cofi_paid <- read_excel("41. Analytics/cofi-trends/Infosheet co-financing history/output_table_infosheet/infosheet_payment_history_2024-12-02.xlsx", sheet="All countries adjusted")|>  clean_names() 

dat_projection <- read_excel("41. Analytics/cofi-projections/xlsx/cofi-projections_2024-11-08.xlsx")|>  clean_names() 

dat_ghed <- read_excel("40. Data/WHO_ghed/export-raw/GHED_data_2023-12-03.xlsx",sheet="Data")|>  clean_names() 

dat_eligibility_thresholds <- read_excel("40. Data/IFS_eligibility-thresholds/eligibility-thresholds.xlsx") |> clean_names()

dat_eligibility_projection <- read_excel("40. Data/IFS_elgibility-projections/Eligibility projections IMF Apr23 WB Jul23.xlsx") |> clean_names()|>
  pivot_longer( cols=3:13, values_to="phase", names_to="year")|>
  mutate(year=as.integer(substr(year,2,5)))|>
  rename(iso3=iso)|>
  arrange(iso3, year)|>
  filter(phase=="Fully self-financing")|> # only at countries has anticipated graduation
  group_by(iso3)|>
  filter(row_number()==1) #first=graduated year

dat_gni <- read_excel("40. Data/World-Bank_gni-pc-atlas/export-raw/API_NY.GNP.PCAP.CD_DS2_en_excel_v2_14280-2024-06-28.xls",sheet = "Data", skip=3)|>
  clean_names()|>
  select(country_code, country_name, !!paste0("x", params$current_year - 2 ))|> #two-year lag; !!can get the variable
  rename(iso3 = country_code, gni = !!paste0("x", params$current_year - 2 ))

dat_jrf <- read_excel("41. Analytics/macro-indicators/JRF on immunisation for infosheet/Infosheet_JRF_until_2023_made_in_2024.xlsx", sheet = "Sheet 1")

dat_vaccine_groups <-  read_excel("40. Data/IFS_mapping-files/vaccine-groups.xlsx", sheet = "flat_library") |> clean_names() 

#### COUNTRY IF&S VARIABLES####

current_eligibility_en <- dat_mapping |> filter(iso3 == params$current_iso3) |> pull(cofi_group)

current_eligibility_fr <- dat_mapping |> filter(iso3 == params$current_iso3) |> pull(cofi_group_fr)

current_countryname_en <- dat_mapping |> filter(iso3 == params$current_iso3) |> pull(country_name_ifs)

current_threshold_low_income <- dat_eligibility_thresholds|>filter(year==params$current_year)|> pull(threshold_low_income)|> format(big.mark=",")

current_threshold_gavi_eligiblity <- dat_eligibility_thresholds|>filter(year==params$current_year)|> pull(threshold_gavi_eligibility)|> format(big.mark=",")

current_GNI <- dat_gni|> filter(iso3==params$current_iso3)|> pull(gni)|> format(big.mark=",")
```


```{=typst} 
#[ // a blocked effect exclusively for this chunk
  #set par(justify: true)
  #set align(center)
  == `r if(params$lang=="en") {"Infosheet on immunisation financing"}`
  == `r if(params$lang=="fr") {"Fiche d'information sur le financement de la vaccination"}`
]
```

::: {.block fill="luma(230)" inset="8pt" radius="2pt"}
`r #dat_mapping |> filter(iso3==params$current_iso3) |> pull(who_region)  #.block fill = "luma(230)"` 
`r if(params$lang=="en"){paste0("Region: ", dat_mapping|> filter(iso3 == params$current_iso3) |> pull(unicef_region_en) )}`
`r if(params$lang=="fr"){paste0("Région: ", dat_mapping|> filter(iso3 == params$current_iso3) |> pull(unicef_region_fr) )}`
:::

# `r if(params$lang=="en"){"Key information on Co-financing"}`
# `r if(params$lang=="fr"){"Informations sur le co-financement de Gavi"}`


`r if (params$lang == "en") { 
 paste0(
 #GNI
   "- Gross National Income per Capita (", 
     params$current_year - 2, 
     "): US$",
     current_GNI,
     "\n", #next line 
 #Phase   
   "- Current Gavi Eligibility (", 
     params$current_year,
     "): ",
     current_eligibility_en,
     "\n\n",
 #Phase explained 
   current_countryname_en,
     " is in the ",
     current_eligibility_en,
     " because its three year rolling average GNI per capita is ",
     
    if(current_eligibility_en=="Initial self-financing"){ paste0(
       "lower than the World Bank low-income country threshold of US$",
       current_threshold_low_income,
       " for ",
       params$current_year - 2,
       "."
       )} else   #else must stay after 
    if(current_eligibility_en=="Preparatory transition phase"){ paste0(
       "between the World Bank low-income country threshold, set at US$",
       current_threshold_low_income,
       " for ",
       params$current_year - 2,
       ", and the Gavi eligibility threshold of US$",
       current_threshold_gavi_eligiblity,
       " for ",
       params$current_year,
       "."
       )} else 
    if(current_eligibility_en=="Accelerated transition phase"){ paste0(
       "higher than the Gavi eligibility threshold of US$",
       current_threshold_gavi_eligiblity,
       " for ",
       params$current_year,
       "."
       )}
 )
}
`

`r if(params$current_iso3 %in% dat_eligibility_projection$iso3){paste0("The country is set to graduate from Gavi support in ", dat_eligibility_projection |> filter(iso3 == params$current_iso3) |> pull(year), ".")}`


`r if (params$lang == "fr") { 
 paste0(
 #GNI
   "- Revenu national brut par habitant (", 
     params$current_year - 2, 
     "): US$",
     current_GNI,
     "\n", #next line 
 #Phase   
   "- Statut actuel d’éligibilité au soutien de Gavi  (", 
     params$current_year,
     "): ",
     current_eligibility_fr,
     "\n\n",
 #Phase explained 
   current_countryname_en,
     " est en ",
     current_eligibility_fr,
     " car la moyenne sur 3 ans de son RNB par habitant est ",
     
    if(current_eligibility_en=="Initial self-financing"){ paste0(
       "sous le seuil de faible revenu de la Banque Mondiale, fixé à",
       current_threshold_low_income,
       " en ",
       params$current_year - 2,
       "."
       )} else   #else must stay after }
    if(current_eligibility_en=="Preparatory transition phase"){ paste0(
       "entre le seuil de faible revenu de la Banque mondiale, fixé à US$",
       current_threshold_low_income,
       " pour ",
       params$current_year - 2,
       ", et le seuil d’éligibilité de Gavi, fixé à US$",
       current_threshold_gavi_eligiblity,
       " pour ",
       params$current_year,
       "."
       )} else 
    if(current_eligibility_en=="Accelerated transition phase"){ paste0(
       "supérieur au seuil d'éligibilité de Gavi de US$",
       current_threshold_gavi_eligiblity,
       " pour ",
       params$current_year,
       "."
       )}
 )
}
`

`r if(params$lang=="en"){"Here is an illustration of Gavi Co-financing Policy:"}# add https://www.gavi.org/programmes-impact/programmatic-policies/co-financing-policy `
`r if(params$lang=="fr"){"Ci-dessous une illustration de la politique d’éligibilité de Gavi:"} `

  
```{=typst} 
#[#set align(center)
#figure(
  image("images/CoFi_model.png", width: 75%))
]// the #[] limit the effect locally

#[ #set text(size: 8pt, fill: gray)
Source: World Bank GNI per capita, Atlas method (current USD); Last updated 18/3/2024
]
```

# `r if(params$lang=="en"){"Vaccination financing"}`
# `r if(params$lang=="fr"){"Financement des vaccins"}`



```{r jrf}
#| echo: false
#| tbl-cap: "cap"
#| warning: false
dat_jrf|>
  filter(iso3==params$current_iso3)|>
#translation: 
  mutate(Indicatrice =case_when(
    Indicator == "Government spending (US$)" ~ "Dépenses du gouvernement(US$)",
    Indicator == "Total spending (US$)" ~ "Dépenses totales(US$)",
    Indicator == "% of government spending" ~ "% des dépenses gouvernementales"
  ))|>
  mutate(Indicator_sel = case_when( 
    params$lang == "en" ~ Indicator,
    params$lang == "fr" ~ Indicatrice
  ))|>
  select(-c(iso3,countryname,Item,Indicator,Indicatrice))|> #not equal to below line 
  select(Indicator_sel, 
         all_of(as.character(params$jrf_year : (params$current_year-1) )))|> #2019-2023
  rename_with(~ if_else(params$lang == "en" & . == "Indicator_sel", "Indicator", . ))|>
  rename_with(~ if_else(params$lang == "fr" & . == "Indicator_sel", "Indicatrice", . ))|>
#tinytable styling  
  tt(width=c(2.5,1,1,1,1,1))|>  # first column share wider width;not rebust to changing numbers of years; used to have a list of notes here but can#t adjust the font sizes - so done in typst
  group_tt(
    i = if(params$lang == "en") 
          list("Vaccines used in routine immunisation (a)" = 1,"Routine immunisation (b)" = 4) 
        else 
          list("Vaccins de la vaccination de routine (a)" = 1,"Vaccination de routine (b)" = 4)
           )|> 
  style_tt( 
    i = 0, #header
    color = "white", background = "#005CB9", align = "c", fontsize = 0.85 #"c"=centred 
    )|> 
  style_tt(
    i=c(2,3,4,6,7,8),
    align = "c", fontsize = 0.85
    )|>
  style_tt(
    i=c(1,5), j=1, #subgroup
    align = "l", background = "#ededed", fontsize = 0.85 #bold = TRUE
    )|>
  style_tt( 
    i=c(1:8), j=1,
    align = "l"
    )|>
  style_tt(
    i = c(0, 1), #top row
    line = "t", 
    line_color = "white"
    )|>
  style_tt(
    i = 8 , #bottom row
    line = "b", line_color = "white"
    )|>
  format_tt(replace = "-", #replacing NA
            escape=TRUE) # escaping the $ not viewing as formula

```

```{=typst} 
#[ #set text(8pt)
   #set enum(numbering: "(a)")//enumerations to match the notes from tiny table list
  `r if (params$lang == "en") {
  "
  + Routine vaccines (traditional and new vaccines) and associated injection supplies included. Government financing of Gavi co-financing payments are also included.
  + Expenditures for routine vaccines (traditional and new) and vaccine co-financing payments using government funds, associated injection supplies, and programme management (training, salaries of HCWs, transport and cold chain) are included.
  "
  }`

  `r if (params$lang == "fr") {
  "
  + Les vaccins de routine (traditionnels et nouveaux) et les fournitures d'injection associées sont inclus. Le financement gouvernemental des paiements de cofinancement de Gavi est également inclus. 
  + Les dépenses liées aux vaccins de routine (traditionnels et nouveaux) et les paiements de cofinancement des vaccins utilisant des fonds publics, les fournitures d’injection associées et la gestion du programme (formation, salaires des agents de santé, transport et chaîne du froid) sont inclus.
  "
  }`
]
```





```{=typst} 
#[ #set text(size: 8pt, fill: gray)
Source: WHO-UNICEF Joint Report Form on immunisation; Last updated: 25/5/2024 
]
```


```{=typst} 
`r if (params$lang == "en") {
  paste0("- Domestic General Government Health Expenditure (GGHE-D) as % Gross Domestic Product (GDP) in ", 
          params$ghed_year, ": ",
          dat_ghed|> filter(code==params$current_iso3, year==params$ghed_year)|> pull(gghed_gdp)|> round(2), "%."
  ) }`

`r if (params$lang == "fr") {
  paste0("- Dépenses Gouvernementales Générales Domestiques en Santé en % Produit Intérieur Brut (PIB) en ", 
          params$ghed_year, ": ",
          dat_ghed|> filter(code==params$current_iso3, year==params$ghed_year)|> pull(gghed_gdp)|> round(2), "%."
  ) }`
```


```{=typst} 
#[ #set text(size: 8pt, fill: gray)
\
Source: WHO Global Health Expenditure Database; Last updated: 3/12/2023
]


// vertical spacing as a page break. Set a big number(99pt) to enforce the next heading live in the next page

#v(99pt) 
```


# `r if(params$lang=="en"){"Gavi-funded vaccines"}`
# `r if(params$lang=="fr"){"Vaccins introduits dans le programme de vaccination avec le soutien de Gavi"}`

```{r launch}
#| echo: false

colnames_launch_en <- c("Vaccines", "Type", "Duration of Gavi support", "Co-financing required")
colnames_launch_fr <- c("Vaccin", "Type", "Durée du soutien de Gavi", "Cofinancement obligatoire")


dat_launch |>
   filter(iso3 == params$current_iso3)|>
#selected language
   mutate(
    vaccine_group_sel = case_when( 
      params$lang == "en" ~ Vaccines,
      params$lang == "fr" ~ Vaccin),
    Type = case_when( 
      params$lang == "en" ~ type_en,
      params$lang == "fr" ~ type_fr),
    duration_sel = case_when( 
      params$lang == "en" ~ Duration,
      params$lang == "fr" ~ Durée),
    cofinancing_required_sel = case_when( 
      params$lang == "en" ~ `Co-financing required`,
      params$lang == "fr" ~ `Cofinancement obligatoire`)
   )|>
   select(vaccine_group_sel, Type, duration_sel, cofinancing_required_sel)|>
   rename_with( ~ if (params$lang == "en") {colnames_launch_en} else {colnames_launch_fr}) |>
#tinytable stlying:
  tt(theme = "striped", width=1 )|>
  style_tt( 
    i = 0, #header
    color = "white", 
    background = "#005CB9",
    align = "c")|> 
  style_tt(
    align = "c",fontsize = 0.85
    )|>
  style_tt(
    i = c(0,1),
    line = "t", line_color = "white" #top line
  )|>
  style_tt(
    i = dat_launch |> filter(iso3 == params$current_iso3) |> nrow(),
    line = "b", #bottom line
    line_color = "white",
    line_width = 0.1
  )|>
  style_tt(
    i = which(dat_launch[dat_launch$iso3==params$current_iso3,"Co-financing required"] == "Yes"), #not sensitive to en/fr
    j = 4 , color = "#005CB9")

```

# `r if(params$lang=="en"){paste0("Current Co-financing obligations (", params$current_year,")")}`
# `r if(params$lang=="fr"){paste0("Co-financement du pays en ", params$current_year)}`

```{r cofi_current_obligations}
#| echo: false
#| fig.align: "center"
#| warning: false

# percentage no need for translation
temp <- dat_projection |>
  filter(iso3 == params$current_iso3, year == params$current_year)  |>
  group_by(vaccine_group)|>
  summarise(cofi_usd=sum(cofi_usd,na.rm=T),
            gavi_support_usd=sum(gavi_support_usd,na.rm=T))|>
  pivot_longer(cols = c("cofi_usd", "gavi_support_usd"), 
               values_to = "cost", 
               names_to = "category")  |>
#!appending totaling
  rbind(
    dat_projection |>
      filter(iso3 == params$current_iso3, year == params$current_year)|>
      summarise(cofi_usd=sum(cofi_usd,na.rm=T),
                gavi_support_usd=sum(gavi_support_usd,na.rm=T))|>
      pivot_longer(cols = c("cofi_usd", "gavi_support_usd"), 
                   values_to = "cost", 
                   names_to = "category")|>
      mutate(vaccine_group = "Total")|> #no need to do french here, this English is used to link to French and then selected one
      select(vaccine_group, category, cost)
      )|>
  mutate(category = case_when(
    category == "cofi_usd" ~ "Co-financing obligations (US$)",
    category == "gavi_support_usd" ~ "Gavi payments for vaccines (US$)"),
    category = factor(category, levels=c("Gavi payments for vaccines (US$)","Co-financing obligations (US$)"))
  )|>
  ungroup()|>
  group_by(vaccine_group)  |>
  mutate(percentage = cost / sum(cost),
         percentage = if_else(percentage==0,NA,percentage))|>
  left_join(dat_vaccine_groups|> 
              select(vaccine_group_ifs, vaccine_group_fr), 
            by =c("vaccine_group"="vaccine_group_ifs"))|>
  mutate(vaccine_group_sel = case_when( 
    params$lang == "en" ~ vaccine_group,
    params$lang == "fr" ~ vaccine_group_fr
  ))
  
####combo table & ggplot percentage bar#### 

# each ggplot needs a vaccine-specific subset stored in a list; ensure total the last row 
temp_split_by_vaccine_unordered <- split(temp, temp$vaccine_group_sel) #Total/Totale can appear elsewhere aphabatically
 temp_total_index <- which(names(temp_split_by_vaccine_unordered) %in% c("Total","Totale"))
 temp_total_list <- temp_split_by_vaccine_unordered[temp_total_index]
 temp_split_by_vaccine <- temp_split_by_vaccine_unordered[- temp_total_index]

 temp_split_by_vaccine <- c(temp_split_by_vaccine, temp_total_list)



plot_function <- function(d, color = "black", ...) { #must have "..." argument
 ggplot(d,
         aes(fill = category,
             y = vaccine_group_sel,#preventing mismatch for table's vaccine vectors , not consider vaccine_group
             x = percentage
             )) +
  geom_bar(position = "fill",
           stat = "identity",
           width=0.9)+
  geom_text(data = d|> filter(category=="Co-financing obligations (US$)"), # idea: https://stackoverflow.com/questions/12409960/ggplot2-annotate-outside-of-plot
            aes(x = 0, y = -0.1, #not using position = position_fill(vjust = 0.5) 
                label = ifelse(is.na(percentage),"", scales::percent(percentage, accuracy = 1))),#NA hided
            color="#00A1DF",
            hjust = 0.5, vjsut = 0.3, size = 3.1)+
  geom_text(data = d|> filter(category=="Gavi payments for vaccines (US$)"),
            aes(x = 1, y = -0.1,
                label = paste0(scales::percent(percentage, accuracy = 1))),#"Gavi ",
            color="#84BD00",
            hjust = 0.5,vjsut = 0.3, size = 3.1)+
  coord_cartesian(ylim = c(-0.2, 0), # range to accommodate texts
                  xlim = c(-0.2,1.2),
                  clip = 'off')+ #ensures elements outside drawn
  theme_void()+
  theme(legend.position = "none",
        plot.margin = unit(c(0.5,0,0.5,0), "lines")
        )+
  scale_fill_manual(values = c("Co-financing obligations (US$)"="#00A1DF",
                               "Gavi payments for vaccines (US$)"="#84BD00"))
}

colnames_en <- c("Vaccine Group", "Co-financing Doses", "Co-financing (US$)", "Gavi Support (US$)","Country Co-financing v.s. Gavi payments (%)")
colnames_fr <- c("Vaccins", "Obligations de cofinancement (en doses)", "Obligations de cofinancement (US$)", "Cofinancement de Gavi (US$)","Cofinancement du pays par rapport aux paiements Gavi (%)")#!!!!!!!!!!!!check translations again

# print combo table
dat_projection |>
  filter(iso3 == params$current_iso3,
         year == params$current_year )|>
  left_join(dat_vaccine_groups|> 
              select(vaccine_group_ifs, vaccine_group_fr), 
            by =c("vaccine_group"="vaccine_group_ifs"))|>
  mutate(vaccine_group_sel = case_when( 
    params$lang == "en" ~ vaccine_group,
    params$lang == "fr" ~ vaccine_group_fr
  ))|>
  group_by(vaccine_group_sel)|>
  summarise(cofi_doses = sum(cofi_doses,na.rm=T),
            cofi_usd = sum(cofi_usd,na.rm=T),
            gavi_support_usd = sum(gavi_support_usd,na.rm=T), .groups="drop")|>
  adorn_totals("row")|>  #!Totaling row using janitor package, result called "Total"
  mutate(
    cofi_doses=format(cofi_doses, big.mark = ","),
    cofi_usd=format(cofi_usd, big.mark = ","),
    gavi_support_usd=format(gavi_support_usd, big.mark = ","),
    vaccine_group_sel = if_else(params$lang=="fr" & vaccine_group_sel=="Total",
                                "Totale",
                                vaccine_group_sel),
    new_column = NA # add empty column for percentage barchart
  )|>
  rename_with( ~ if (params$lang == "en") {colnames_en} else {colnames_fr}) |> #without{}also fine
#tinytable stlying:
  tt(theme = "striped", width=c(0.8,1,1,1,1.1) )|>
  format_tt(escape=TRUE)|>
  style_tt( 
    i = 0, #header
    color = "white", background = "#005CB9", align = "c")|> 
  style_tt(
    align = "c", fontsize = 0.85#, alignv = "m"#vertical middle aligned
    )|>
  style_tt(
    i = c(0,1),
    line = "t", line_color = "white"
    )|>
  style_tt(
    i = dat_projection |> filter(iso3 == params$current_iso3,
         year == params$current_year) |> select(vaccine_group)|> unique() |> nrow() +1 , # this can be a global variable in settings
    line = "b", line_color = "white", bold=TRUE
    )|>
  style_tt(i = c(1: nrow(temp)), j=3, 
           color = "#00A1DF"
           )|>
  style_tt(i = c(1: nrow(temp)), j=4, 
           color = "#84BD00"
           )|>
  plot_tt(j = 5,
          fun = plot_function, #cell-embedded graph
          data = temp_split_by_vaccine ) #,height = 1

```



# `r if(params$lang=="en"){"Country Co-finanacing paid in US$"}`
# `r if(params$lang=="fr"){"Cofinancement du pays payé (US$)"}`
 

```{r cofi_paid}
#| echo: false
#| fig.align: "center"
#| fig.width: 8
#| warning: false


#### prepare temporary dataset by vaccines ####
temp <- dat_cofi_paid |> 
  filter(iso3 == params$current_iso3 )|>
  mutate(vaccine_group_sel = case_when( 
    params$lang == "en" ~ vaccine_group_infosheet,
    params$lang == "fr" ~ vaccine_group_fr
  ))|>
  mutate( #ensure correct levels for color mapping:
    vaccine_group_gavir = factor(vaccine_group_gavir, levels = unique(vaccine_group_gavir)), 
    vaccine_group_sel = factor(vaccine_group_sel, levels = unique(vaccine_group_sel)),
    year = factor(year, levels = rev(sort(unique(year))))
  )
 
# prepare temporary dataset for annual total paid
temp_total <- temp |> 
  group_by(iso3, year) |> 
  summarise(cofi_usd_paid_total = sum(cofi_usd_paid, na.rm = TRUE), .groups="drop")|>
  mutate(cofi_usd_paid_total=if_else(cofi_usd_paid_total==0, NA ,cofi_usd_paid_total))|>#!hide waiver years 
  arrange(desc(cofi_usd_paid_total))|>
  mutate(whether_top3 = row_number() <= 3) #find top years to squeeze the label, not necessary the most recent year 
  

# plotting stacked bar chart horizontal
ggplot(temp) + 
    geom_bar(aes(fill = vaccine_group_sel, 
                 y = year,
                 x = cofi_usd_paid),
             position = "stack", 
             stat = "identity")+
    geom_text(data = temp_total, #labeling annual totals
              aes(x = cofi_usd_paid_total, 
                  y = year, 
                  label = comma(cofi_usd_paid_total)),
                  position = position_stack(vjust = 1), #placement
                  size = 3,
                  hjust = ifelse(temp_total$whether_top3==TRUE,
                                 1.1, # overlapping text with the top-year bar to save space 
                                 -0.2),
              color = ifelse(temp_total$whether_top3==TRUE,
                             "white",
                             "black")
              )+ 
    theme_minimal()+
    labs(
      x = {if(params$lang=="en") "Country Co-financing paid (US$)" else "Cofinancement du pays payé (US$)"},
      fill= {if(params$lang=="en") "Vaccines introduced\nin order" else "Vaccins introduits\ndans l'ordre"},#\n for next line
      y="", title="" )+
    scale_x_continuous(labels = comma)+  
    theme(legend.position = "right")+
    scale_fill_manual(values = as.vector(gavi_colors(levels(temp$vaccine_group_gavir))))#follows factor levels of colors


# META version used png files
# knitr::include_graphics(paste0("graph_to_read/cofi_paid_",params$current_iso3,".png"))
```

# `r if(params$lang=="en"){"Co-financing obligations projections"}`
# `r if(params$lang=="fr"){"Projections des obligations de cofinancement"}`
 
```{r cofi_projections}
#| echo: false
#| fig.align: "center"
#| fig.width: 7
#| fig.height: 2


#### prepare data frame for plotting ####
temp_noIPV <- dat_projection|>
  filter(iso3 == params$current_iso3,
         vaccine_group!="IPV")|> # to drop the level of IPV due to zero CoFi
  left_join(dat_vaccine_groups|> 
            select(vaccine_group_wbs, vaccine_group_ifs, vaccine_group_gavir, vaccine_group_fr), 
            by =c("vaccine_group"="vaccine_group_ifs"))|>
  mutate(vaccine_group_sel = case_when( 
    params$lang == "en" ~ vaccine_group,
    params$lang == "fr" ~ vaccine_group_fr
  ))|>
  mutate(vaccine_group_gavir =  ifelse(is.na(vaccine_group_gavir),vaccine_group, vaccine_group_gavir),
         vaccine_group_gavir = factor(vaccine_group_gavir, levels = unique(vaccine_group_gavir)), # Ensure levels for correct color mapping factor
         vaccine_group_sel = factor(vaccine_group_sel, levels = unique(vaccine_group_sel)))

#Drop calender years for FY countries!
if(params$current_iso3 %in% c("PAK","KEN","TAZ","ETH")){
  temp_noIPV <- temp_noIPV |>
    filter(nchar(year) > 4)
}

#### plotting stacked bar chart ####
ggplot(temp_noIPV) + 
  geom_bar(aes(fill = vaccine_group_sel,#vaccine_group
               y = cofi_usd,
               x = year),
           position="stack", 
           stat="identity", 
           width = 0.38)+
  theme_minimal()+
  labs(x = "", 
       y = {if(params$lang=="en") "US$ (Millions)" else "$US (en millions)"},     #need to accommodate thousands
       fill = "")+
  scale_fill_manual(values = as.vector(gavi_colors(levels(temp_noIPV$vaccine_group_gavir))))+
  scale_y_continuous(labels = scales::label_number(scale = 1e-6, suffix = "")
                     #,breaks = seq(0, max(dat_projection$cofi_usd, na.rm = TRUE), by = 1e6)
                     )

#### prepare data frame for table ####  
temp_withIPV <- dat_projection |> 
  filter(iso3 == params$current_iso3)|> # keep IPV as 0
  group_by(year, vaccine_group)|>
  summarise(cofi_usd = sum(cofi_usd,na.rm=T), .groups="drop")|>
  mutate(cofi_usd=format(cofi_usd, big.mark = ","))
  
#Drop calender years for FY countries!
if(params$current_iso3 %in% c("PAK","KEN","TAZ","ETH")){
  temp_withIPV <- temp_withIPV |>
    filter(nchar(year) > 4)
}

#### print table ####
temp_withIPV |>
  pivot_wider(id_cols = vaccine_group, 
              values_from = cofi_usd, 
              names_from = year)|>
 #Appending Total/Totale 
   bind_rows( temp_withIPV |> #! use this df instead of dat_projection
      # filter(iso3 == params$current_iso3) |>
      group_by(year) |>
      mutate(cofi_usd = as.numeric(gsub(",", "", cofi_usd)))|> #!! de-format so that it can be summed
      summarise(cofi_usd = sum(cofi_usd, na.rm = TRUE), .groups = "drop") |>
      mutate(vaccine_group = "Total", # "Total" is embedded in dat_vaccine_groups
             cofi_usd = format(cofi_usd, big.mark = ",")) |>
      pivot_wider(id_cols = vaccine_group, 
                  values_from = cofi_usd, 
                  names_from = year)
  )|>
  mutate(across(everything(), ~ replace_na(.x, "")))|> # NA means not launched
  left_join(dat_vaccine_groups|> select(vaccine_group_ifs, vaccine_group_fr),
            by = c("vaccine_group" = "vaccine_group_ifs"))|>
#translation
  mutate(vaccine_group_sel = case_when( #favored 
    params$lang == "en" ~ vaccine_group,
    params$lang == "fr" ~ vaccine_group_fr
  )) |>
  select(vaccine_group_sel, everything(),
         - c(vaccine_group, vaccine_group_fr))|> # old approach was all_of(as.character(params$current_year : max(as.integer(temp$year)))), but this couldn't accomodate FY years
  rename_with(~ if_else(params$lang == "fr" & . == "vaccine_group_sel", 
                        "Cofinancement (US$)", . ))|>
  rename_with(~ if_else(params$lang == "en" & . == "vaccine_group_sel", 
                        "Co-financing (US$)", . ))|>
#tinytable styling:
  tt(theme = "striped", width=1 )|>
  style_tt( 
    i = 0, #header
    color = "white", background = "#005CB9", align = "c")|> 
  style_tt(
    align = "c", fontsize = 0.85
    )|>
  style_tt(
    i = c(0,1),
    line = "t", line_color = "white"
    )|>
  style_tt(
    i = dat_projection|> filter(iso3 == params$current_iso3)|> select(vaccine_group)|> unique()|> nrow() + 1 , # +1 to reach last row
    line = "b", line_color = "white", line_width = 0.1
    )|>
  style_tt(
    i = dat_projection|> filter(iso3 == params$current_iso3)|> select(vaccine_group)|> unique()|> nrow() + 1, 
    #j = 1 , 
    bold =TRUE )|>
  format_tt(escape=TRUE)


#### For vaccine-specific disclaimers ####
# portfolio includes IPV, Malaria?
vaccines_en_all <- dat_projection |>
  filter(iso3 == params$current_iso3)|>
  pull(vaccine_group)|>
  unique()

whether_IPV <- "IPV" %in% vaccines_en_all
whether_Malaria <- "Malaria" %in% vaccines_en_all

# vaccines to be launch
vaccines_en_future <- dat_projection |> 
  filter(iso3 == params$current_iso3) |>
  mutate(current_year = year == params$current_year) |>
  group_by(vaccine_group) |>
  filter(!any(current_year)) |>
  pull(vaccine_group) |>
  unique()

vaccines_fr_future <- temp_noIPV |> # use temp because fr vaccine names are merged already
  filter(iso3 == params$current_iso3) |>
  mutate(current_year = year == params$current_year) |>
  group_by(vaccine_group_fr) |>
  filter(!any(current_year)) |>
  pull(vaccine_group_fr) |>
  unique()

```


```{=typst} 
#[ #set text(size: 9pt)
//English:

  `r if (params$lang == "en") {"    
    - These projections do not guarantee renewal of support or approval of the country's application.
    - Final co-financing obligations will be communicated in decision letters.
    "}`
  
  `r if (params$lang=="en" & length(vaccines_en_future)>=1 ) { paste0(" //length!=0 means there are vaccine(s) unlaunched 
    - The precise dates and amounts of the introduction of the ",
    paste(vaccines_en_future, collapse = ", "),
    " remains indicative.")
    }`

  `r if (params$lang=="en" & whether_IPV ) {" 
    - The absence of co-financing for IPV post 2026 is subject to Gavi Board’s approval. 
    "}`
  
  `r if (params$lang=="en" & whether_Malaria ) {"
    - Projections for Malaria 2026 onwards are not estimated due to rapid programmatic changes.
    "}`
  
//French:
  
`r if (params$lang == "fr") {"    
    - Ces projections ne garantissent pas un renouvellement du soutien ou une approbation d’une nouvelle soumission par le pays.
    - Les obligations de co-financement finales sont communiquées par les lettres de décision.
    "}`
  
  `r if (params$lang=="fr" & length(vaccines_fr_future)>=1 ) { paste0(" //length!=0 means there are vaccine(s) unlaunched 
    - Les dates et montants précis de l'introduction du ",
    paste(vaccines_fr_future, collapse = ", "),
    " restent indicatifs.")
    }`

  `r if (params$lang=="fr" & whether_IPV ) {" 
    - L’absence de co-financement pour le vaccin VPI après 2026 sera sujet à une approbation par le conseil d’administration de Gavi. 
    "}`
  
  `r if (params$lang=="fr" & whether_Malaria ) {"
    - Les projections concernant le vaccin contre le paludisme à partir de 2026 ne sont pas estimées en raison de changements programmatiques rapides.
    "}`
]


//vertical spacing as page break
//#v(300pt)

```


# `r if(params$lang=="en"){"Projections on country Co-financing obligations and Gavi support"}`
# `r if(params$lang=="fr"){"Projections sur les obligations de cofinancement des pays et le soutien de Gavi"}`


```{r projection-total-percentage-compare}
#| echo: false

#assessing total are correctly calculated: sum(dat_projection$cofi_usd + dat_projection$gavi_support_usd != dat_projection$total_usd,na.rm=T)

#### prepare data with CoFi-Gavi share ####
temp <- dat_projection |>
  filter(iso3 == params$current_iso3)|>
  group_by(year,iso3)|> #iso3 only serves as id_cols
  summarise(cofi_usd = sum(cofi_usd,na.rm=T), 
            gavi_support_usd = sum(gavi_support_usd, na.rm=T), 
            total_usd = sum(total_usd, na.rm=T),
            .groups="drop")|>
  mutate(perc_cofi = round(100*cofi_usd/total_usd),
         perc_gavi = round(100*gavi_support_usd/total_usd),
         perc_total = round(100*total_usd/total_usd),#100% of course
         
         cofi_usd = format(cofi_usd, big.mark = ","),
         gavi_support_usd = format(gavi_support_usd, big.mark = ","),
         total_usd = format(total_usd, big.mark = ","), 
         
         label_cofi = paste0(cofi_usd," (",perc_cofi,"%)"),
         label_gavi = paste0(gavi_support_usd," (",perc_gavi,"%)"),
         label_total = paste0(total_usd," (",perc_total,"%)")
         )

#Drop calender years for FY countries!
if(params$current_iso3 %in% c("PAK","KEN","TAZ","ETH")){
  temp <- temp |>
    filter(nchar(year) > 4)
}


#### print table####
  temp|>
    pivot_wider(id_cols = iso3, 
                values_from = c(label_cofi), 
                names_from = year)|>
    rbind(temp|>
          pivot_wider(id_cols = iso3, 
                      values_from = c(label_gavi), 
                      names_from = year)
    )|>
    #totaling 
    rbind(temp|> 
          pivot_wider(id_cols = iso3, 
                      values_from = c(label_total), 
                      names_from = year)
    )|>
    mutate(total_en = c("Co-financing costs (US$) and share (%)","Gavi support costs (US$) and share (%)","Sum of costs (US$) and share (%)"),
           total_fr = c("Obligations de cofinancement des pays (US$) et part (%)","Cofinancement de Gavi (US$) et part (%)","Somme des coûts (US$) et part (%)"),
           Total = case_when( #selected defualt English
                         params$lang == "en" ~ total_en,
                         params$lang == "fr" ~ total_fr
           ))|>
    select(Total, everything(),
           - c(iso3, total_en, total_fr))|> #old ways was all_of(as.character(params$current_year : max(as.integer(temp$year)))), but his cannot accommodate FY countries
    rename_with(~ if_else(params$lang == "fr" & . == "Total", 
                          "Totale", . ))|>
#table stlying:
  tt(theme = "striped",
     width= c(1.5,
              rep(1,
                  length(unique(temp$year))) #was width= c(1.5,rep(1,6)), but should be flexible to number of years presented
             )
   )|>
  style_tt( 
    i = 0, #header
    color = "white", background = "#005CB9", align = "c")|> 
  style_tt(
    align = "c", fontsize = 0.85
    )|>
  style_tt(
    i = c(0,1),
    line = "t", line_color = "white"
    )|>
  style_tt(
    i = 3 , 
    line = "b", line_color = "white", line_width = 0.1
    )|>
  format_tt(escape=TRUE)
```

```{=typst} 
#[ #set text(9pt)
  `r if (params$lang == "en") {
  "
  - These projections do not guarantee renewal of support or approval of the country's application.
  - Final co-financing obligations will be communicated in decision letters.
  - Projections for Malaria 2026 onwards are not estimated due to rapid programmatic changes.
  "
  }`

  `r if (params$lang == "fr") {
  "
  - Ces projections ne garantissent pas un renouvellement du soutien ou une approbation d’une nouvelle soumission par le pays.
  - Les obligations de co-financement finales sont communiquées par les lettres de décision.
  - Les projections concernant le vaccin contre le paludisme à partir de 2026 ne sont pas estimées en raison de changements programmatiques rapides.
  "
  }`
]
```





::: {.article} 
article test
:::